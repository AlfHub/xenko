<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <SiliconStudioNETFrameworkVersion>v1.0</SiliconStudioNETFrameworkVersion>
  </PropertyGroup>

  <!-- 
  *****************************************************************************************************************************
  Handle SiliconStudioEmbedNativeLibrary files
  *****************************************************************************************************************************
  -->

  <PropertyGroup>
    <XamarinVersion>$([MSBuild]::GetRegistryValueFromView('HKEY_LOCAL_MACHINE\SOFTWARE\Xamarin\iOS', 'InstalledVersion', '8.2.0', RegistryView.Registry32))</XamarinVersion>
    <XamarinIOSMajorVersion>$([System.Text.RegularExpressions.Regex]::Match($(XamarinVersion), `^(\d+)\.(\d+)\.`).get_Groups().get_Item(1).ToString())</XamarinIOSMajorVersion>
    <XamarinIOSMinorVersion>$([System.Text.RegularExpressions.Regex]::Match($(XamarinVersion), `^(\d+)\.(\d+)\.`).get_Groups().get_Item(2).ToString())</XamarinIOSMinorVersion>
    <!-- Let users add this if they want for now.
    <XenkoMTouchExtras>-framework OpenGLES -framework SpriteKit -framework CoreAudio -framework CoreMedia -framework CoreText -framework CoreVideo -framework AudioToolbox -framework MediaPlayer -framework GLKit</XenkoMTouchExtras>
    -->
    <XenkoMTouchExtras></XenkoMTouchExtras>
  </PropertyGroup>

  <Target Name="EnsureXamarinVersion" BeforeTargets="PrepareForBuild">
    <Error Condition="'$(XamarinVersion)' == ''" Text="Xamarin iOS version was not found. Ensure HKEY_LOCAL_MACHINE\SOFTWARE\Xamarin\iOS\InstalledVersion is properly set."/>
    <Error Condition="($(XamarinIOSMajorVersion) == 8 And $(XamarinIOSMinorVersion) &lt; 10) Or $(XamarinIOSMajorVersion) &lt; 8" Text="Xamarin iOS version less than 8.10 is not compatible with Xenko. Please upgrade to 8.10."/>
  </Target>

  <!-- Rewrite BuildDependsOn and ResolveReferencesDependsOn -->
  <PropertyGroup Condition=" '$(SiliconStudioIsExecutable)' == 'true'">
    <!-- iOS: Ensure assets have been deployed before calling _CollectBundleResources (on Xamarin iOS 7 we use BeforeTargets) -->
    <_CollectBundleResourcesDependsOn>
      DeployAssetsiOS;
      $(_CollectBundleResourcesDependsOn);
    </_CollectBundleResourcesDependsOn>
  </PropertyGroup>

  <!-- Override PostSettings target CopySiliconStudioNativeLibraries. 
       Copy the libcore.a library to the project root directory for future native link. -->
  <Target Name="CopyXenkoNativeiOsLibrary" Condition=" '$(SiliconStudioIsExecutable)' == 'true'" DependsOnTargets="_SiliconStudioBuildDependencies" AfterTargets="ResolveAssemblyReferences">
    <ItemGroup Condition=" '$(SiliconStudioPlatform)' == 'iOS' ">
      <!-- strip any "lib" prefix and populate the LibraryName value -->
      <_SiliconStudioDependencyNativeLib>
        <LibraryName>$([System.Text.RegularExpressions.Regex]::Match('%(Filename)', `(lib)*(.+)`).get_Groups().get_Item(2).ToString())</LibraryName>
      </_SiliconStudioDependencyNativeLib>

      <None Include="@(_SiliconStudioDependencyNativeLib)">
        <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      </None>
    </ItemGroup>

    <PropertyGroup Condition=" '$(SiliconStudioPlatform)' == 'iOS' ">
      <MtouchExtraArgsLibs>$(XenkoMTouchExtras) -L"%24{ProjectDir}" @(_SiliconStudioDependencyNativeLib->'-l%(LibraryName) "%24{ProjectDir}/%(Filename)%(Extension)"',' ')</MtouchExtraArgsLibs>
      <MtouchExtraArgs>$(MtouchExtraArgs) --compiler=clang -cxx -gcc_flags '-lstdc++ $(MtouchExtraArgsLibs)'</MtouchExtraArgs>
    </PropertyGroup>

    <!--<Copy SessionId="$(BuildSessionId)" SourceFiles="@(_SiliconStudioDependencyNativeLib)" DestinationFiles="@(_SiliconStudioDependencyNativeLib->'$(ProjectDir)%(Filename)%(Extension)')"/>-->
  </Target>

  <!-- Deploy assets and native libraries (Xamarin iOS 8.2+ version) -->
  <Target Name="DeployAssetsiOS" DependsOnTargets="_GenerateBundleName;SiliconStudioCompileAsset" Condition="'$(SiliconStudioIsExecutable)' == 'true'">
    <!-- Add all game data as content on iphone. Note that "Link" doesn't work but Xamarin seems to use a similar "LogicalName" property. -->
    <ItemGroup>
      <!-- Define the Assets to deploy -->
      <AssetsToDeploy Include="$(SiliconStudioCompileAssetOutputPath)\**\*.*"/>

      <BundleResource Include="@(AssetsToDeploy)" Condition="$(XamarinIOSMajorVersion) == 8 And $(XamarinIOSMinorVersion) &lt; 10">
        <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
        <LogicalName>data\%(RecursiveDir)%(Filename)%(Extension)</LogicalName>
        <OptimizeImage>False</OptimizeImage>
      </BundleResource>
    
      <Content Include="@(AssetsToDeploy)" Condition="($(XamarinIOSMajorVersion) == 8 And $(XamarinIOSMinorVersion) >= 10) Or $(XamarinIOSMajorVersion) >= 9">
        <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
        <Link>data\%(RecursiveDir)%(Filename)%(Extension)</Link>
      </Content>
    </ItemGroup>
  </Target>
</Project>
