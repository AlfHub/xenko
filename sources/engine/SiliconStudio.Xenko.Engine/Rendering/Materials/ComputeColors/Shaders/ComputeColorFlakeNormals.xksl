// Copyright (c) 2014-2017 Silicon Studio Corp. All rights reserved. (https://www.siliconstudio.co.jp)
// See LICENSE.md for full license information.
shader ComputeColorFlakeNormals : ComputeColor, 
                                  CarPaintCommon,
                                  DynamicTextureStream<TStream>,
                                  MaterialPixelShadingStream
{
    compose ComputeColor flakeParameters;
    compose ComputeColor flakeNormalMap;
    
    override float4 Compute()
    {
        float4 fp = flakeParameters.Compute();
        
        float3 flakeNormalFromMap = float3(0.0f, 0.0f, 1.0f);
         
        float4 flakeBaseNormals = flakeNormalMap.Compute();
        flakeNormalFromMap.xy = flakeBaseNormals.rg * float2(flakeBaseNormals.a, 1.0f);
        flakeNormalFromMap.xy = flakeNormalFromMap.xy * 2.0f - 1.0f;
        flakeNormalFromMap.z = sqrt(max(0.0, 1.0f - dot(flakeNormalFromMap.xy, flakeNormalFromMap.xy)));

        float3 randomNormal = GenerateFlakeRandomNormal( streams.TexCoord, fp, flakeNormalFromMap );

        // TODO Fix inconsitent random flake normal scaling
        flakeNormalFromMap = lerp(flakeNormalFromMap, randomNormal, streams.NdotL);

        flakeNormalFromMap = normalize(flakeNormalFromMap);

        return float4(flakeNormalFromMap, 0.0f);
    }
};
