// Copyright (c) 2014-2017 Silicon Studio Corp. All rights reserved. (https://www.siliconstudio.co.jp)
// See LICENSE.md for full license information.
shader ComputeColorFlakeNormals : ComputeColor, 
                                  CarPaintCommon,
                                  DynamicTextureStream<TStream>,
                                  MaterialPixelShadingStream
{
    compose ComputeColor FlakeScaleSizeSize_VarianceFlake_Sparkle_Strength;

    override float4 Compute()
    {
#if CAR_PAINT_PROCEDURAL
        const float4 flakeGenerationParameters = FlakeScaleSizeSize_VarianceFlake_Sparkle_Strength.Compute().rgba;
        const float3 baseNormal = float3(0.0f, 0.0f, 1.0f);

        float3 randomFlakeNormal = GenerateRandomFlakeNormal(flakeGenerationParameters, baseNormal, streams.TexCoord);
        float3 flakeNormal = normalize(lerp(baseNormal, randomFlakeNormal, flakeGenerationParameters.a));
#else
        float4 normalMap = FlakeScaleSizeSize_VarianceFlake_Sparkle_Strength.Compute();
        float3 flakeNormal = normalMap.rgb;
        flakeNormal.xy = flakeNormal.rg * float2(normalMap.a, 1.0f);
        flakeNormal.xy = flakeNormal.xy * 2.0f - 1.0f;
        flakeNormal.z = sqrt(max(0.0, 1.0f - dot(flakeNormal.xy, flakeNormal.xy)));
#endif

        return float4(flakeNormal, 0.0f);
    }
};
