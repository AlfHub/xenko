// Copyright (c) 2014-2017 Silicon Studio Corp. All rights reserved. (https://www.siliconstudio.co.jp)
// See LICENSE.md for full license information.
shader ComputeColorFlakeColor : ComputeColor, 
                                CarPaintCommon,
                                DynamicTextureStream<TStream>,
                                MaterialPixelShadingStream,
                                BRDFMicrofacet
{
    compose ComputeColor FlakeScaleSizeSize_VariancePearlescent_Ratio;
    compose ComputeColor FlakeBaseColor;
    compose ComputeColor FlakeRandom_Color_Strength;

    override float4 Compute()
    {
        const float4 flakeGenerationParameters = FlakeScaleSizeSize_VariancePearlescent_Ratio.Compute().rgba;
        const float fresnel = FresnelSchlick(0.0f, streams.LdotH);
        
        float3 baseColor = FlakeBaseColor.Compute().rgb;
        baseColor = lerp(baseColor, 0.0f, fresnel);
        
        const float randomColorFactor = FlakeRandom_Color_Strength.Compute().r;

#if 0 // DESKTOP
        float3 randomFlakeColor = GenerateRandomFlakeColor(streams.TexCoord, flakeGenerationParameters, baseColor);
#else // MOBILE TEST
        float3 randomFlakeColor = baseColor;
#endif

        float3 flakeColor = lerp(baseColor, randomFlakeColor, randomColorFactor);

        return float4(flakeColor, 1.0f);
    }
};
