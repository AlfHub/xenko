// Copyright (c) 2014-2017 Silicon Studio Corp. All rights reserved. (https://www.siliconstudio.co.jp)
// See LICENSE.md for full license information.
shader ComputeColorFlakeColor : ComputeColor, 
                                CarPaintCommon,
                                DynamicTextureStream<TStream>,
                                MaterialPixelShadingStream,
                                BRDFMicrofacet
{
    compose ComputeColor FlakeScaleSizeSize_VariancePearlescent_Ratio;
    compose ComputeColor FlakeBaseColor;
    compose ComputeColor FlakeFresnelColor;
    compose ComputeColor FlakeRandom_Color_Strength;

    override float4 Compute()
    {
        // Retrieve user parameters
        const float4 flakeGenerationParameters = FlakeScaleSizeSize_VariancePearlescent_Ratio.Compute().rgba;      
        const float randomColorFactor = FlakeRandom_Color_Strength.Compute().r;
        
        // Compute Fresnel factor and its color
        const float fresnel = FresnelSchlick(0.0f, streams.LdotH);      
        const float3 fresnelColor = FlakeFresnelColor.Compute().rgb;
        
        // Mix it with the base color
        float3 baseColor = FlakeBaseColor.Compute().rgb;
        baseColor = lerp(baseColor, fresnelColor, fresnel);

#if CAR_PAINT_PROCEDURAL
        float3 randomFlakeColor = GenerateRandomFlakeColor(flakeGenerationParameters, baseColor, streams.TexCoord);
#else
        float3 randomFlakeColor = baseColor;
#endif
    
        float3 flakeColor = lerp(baseColor, randomFlakeColor, randomColorFactor);
        return float4(flakeColor, 1.0f);
    }
};
