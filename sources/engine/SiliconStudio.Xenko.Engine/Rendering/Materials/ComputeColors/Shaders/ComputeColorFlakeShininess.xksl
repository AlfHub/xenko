// Copyright (c) 2014-2017 Silicon Studio Corp. All rights reserved. (https://www.siliconstudio.co.jp)
// See LICENSE.md for full license information.
shader ComputeColorFlakeShininess : ComputeColor, 
                                    CarPaintCommon,
                                    DynamicTextureStream<TStream>,
                                    MaterialPixelShadingStream
{
    compose ComputeColor FlakeScale;
    compose ComputeColor FlakeSize;
    compose ComputeColor FlakeSizeVariance;
    
    compose ComputeColor FlakeBaseShininess;
    compose ComputeColor FlakeRandomShininessStrength;

    override float3 Compute()
    {
        const float scale = FlakeScale.Compute().r;
        const float size = FlakeSize.Compute().r;
        const float sizeVariance = FlakeSizeVariance.Compute().r;
        const float4 flakeGenerationParameters = float4(scale, size, sizeVariance, 0.0f);

        const float baseShininess = FlakeBaseShininess.Compute().r;
        const float randomShininessStrength = FlakeRandomShininessStrength.Compute().r;
        
#if 0 // DESKTOP
        float randomShininess = GenerateRandomFlakeShininess(streams.TexCoord, flakeGenerationParameters, baseShininess);
#else // MOBILE TEST
        float randomShininess = baseShininess;
#endif

        float flakeShininess = lerp(baseShininess, randomShininess, randomShininessStrength);

        // Force 3d vector return type (to avoid glsl compilation errors)
        return float3(flakeShininess, flakeShininess, flakeShininess);
    }
};
