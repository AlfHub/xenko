// Copyright (c) 2014-2017 Silicon Studio Corp. All rights reserved. (https://www.siliconstudio.co.jp)
// See LICENSE.md for full license information.
namespace SiliconStudio.Xenko.Rendering.Materials
{
    /// <summary>
    /// Material glossiness map (for a metal flakes layer)
    /// </summary>
    shader MaterialSurfaceGlossinessMapMetalFlakes<bool TInvert> : IMaterialSurfacePixel,
                                                                    MaterialPixelShadingStream,
                                                                    Transformation,
                                                                    PositionStream4
    {
        compose ComputeColor baseGlossinessMap;
        compose ComputeColor surfaceToEyeDistanceFactor;

        override void Compute()
        {
            var baseGlossiness = baseGlossinessMap.Compute().r;
            if (TInvert)
            {
                baseGlossiness = 1.0 - baseGlossiness;
            }
            
            var distanceFactor = surfaceToEyeDistanceFactor.Compute().r;

            // Correct both glossiness factor (to avoid aliasing and unrealistic values)
            float normalLength = length(streams.matNormal);
            baseGlossiness = normalLength * baseGlossiness / (normalLength + baseGlossiness * (1.0f - normalLength));
            streams.matGlossiness =  normalLength * streams.matGlossiness / (normalLength + streams.matGlossiness * (1.0f - normalLength));

            // Interpolate the factors using the surface to camera distance
            float LOD = saturate(distance(Eye.xyz, streams.PositionWS.xyz) * distanceFactor);
            streams.matGlossiness = lerp(streams.matGlossiness, baseGlossiness, LOD);
        }
    };
}
