// Copyright (c) 2014-2017 Silicon Studio Corp. All rights reserved. (https://www.siliconstudio.co.jp)
// See LICENSE.md for full license information.
namespace SiliconStudio.Xenko.Rendering.Materials
{
    /// <summary>
    /// Performs a Microfacet shading
    /// </summary>
    shader MaterialSurfaceShadingSpecularMicrofacetCarPaint : IMaterialSurfaceShading, MaterialPixelShadingStream, Math, BRDFMicrofacet
    {
        compose IMaterialSpecularMicrofacetFresnelFunction fresnelFunction;

        compose IMaterialSpecularMicrofacetVisibilityFunction geometricShadowingFunction;

        compose IMaterialSpecularMicrofacetNormalDistributionFunction normalDistributionFunction;

        compose IMaterialSpecularMicrofacetEnvironmentFunction environmentFunction;

        override float3 ComputeDirectLightContribution()
        {
            var specularColor = streams.matSpecularVisible;

            var fresnel = fresnelFunction.Compute(specularColor);
            var geometricShadowing = geometricShadowingFunction.Compute();
            var normalDistribution = normalDistributionFunction.Compute();

            var reflected = fresnel * geometricShadowing * normalDistribution / 4;

            return reflected * streams.lightColorNdotL * streams.matDiffuseSpecularAlphaBlend.y;
        }

        override float3 ComputeEnvironmentLightContribution()
        {
            var specularColor = streams.matSpecularVisible;

            // TODO: Allow plugability of this function (pb is that it is a combination of fresnel, visibility and NDF)
            //return specularColor * streams.envLightSpecularColor;
            const float3 coef = float3( 0.3, 0.59, 0.11 );
            float3 environmentContribution = environmentFunction.Compute(specularColor, streams.alphaRoughness, streams.NdotV) * streams.envLightSpecularColor;
            environmentContribution = lerp(environmentContribution.rgb, dot(coef, environmentContribution.rgb), 0.6f);

            const float fresnel = FresnelSchlick(0.0f, streams.LdotH);
            return lerp(environmentContribution, 0.0f, fresnel);
        }
    };
}
