// Copyright (c) 2014-2017 Silicon Studio Corp. All rights reserved. (https://www.siliconstudio.co.jp)
// See LICENSE.md for full license information.

namespace SiliconStudio.Xenko.Rendering.Compositing
{
    /// <summary>
    /// A MSAA depth textures resolver shader
    /// </summary>
    internal shader MSAADepthResolverShader : ImageEffectShader, Math
    {
        stage float4 SvPosUnpack;
        stage float2 TextureSizeLess1;
#ifndef INPUT_MSAA_SAMPLES
		stage Texture2DMS<float4> InputTexture;
#elif INPUT_MSAA_SAMPLES == 1
		stage Texture2DMS<float4, 1> InputTexture;
#elif INPUT_MSAA_SAMPLES == 2
		stage Texture2DMS<float4, 2> InputTexture;
#elif INPUT_MSAA_SAMPLES == 4
		stage Texture2DMS<float4, 4> InputTexture;
#elif INPUT_MSAA_SAMPLES == 8
		stage Texture2DMS<float4, 8> InputTexture;
#else
        #error "Unsupported amount of MSAA texture samples."
#endif

		// 1:-1 to 0:TextureSize
        uint2 ClipPosToUvPos(float2 clipPos)
        {
            return (uint2)(clipPos * SvPosUnpack.xy + SvPosUnpack.zw);
        }

        override stage float4 Shading()
        {
            float4 output = 0;
			uint2 pixelPos = ClipPosToUvPos(streams.Position.xy);

            float resolvedDepth = InputTexture.Load(pixelPos, 0).r;

#ifdef INPUT_MSAA_SAMPLES
            
            // Get the closest depth value
            for (int sampleIndex = 1; sampleIndex < INPUT_MSAA_SAMPLES; sampleIndex++)
            {
                float sampleDepth = InputTexture.Load(pixelPos, sampleIndex).r;
                resolvedDepth = min(resolvedDepth, sampleDepth);
            }

#endif

            streams.Depth = resolvedDepth;
            return 0;
        }
    };
}
