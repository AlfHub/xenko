// Copyright (c) 2017 Silicon Studio Corp. (http://siliconstudio.co.jp)
// This file is distributed under GPL v3. See LICENSE.md for details.

namespace SiliconStudio.Xenko.Rendering.Images
{
    /// <summary>
	/// Screen Space Local Reflections shader with common variables and functions
    /// </summary>
    shader SSLRCommon : ImageEffectShader, Utilities, NormalPack
    {	
		cbuffer Data
        {
			stage float MaxColorMiplevel;
			stage float TraceSizeMax;
			stage float2 TexelSize;
			
			stage float2 SSRtexelSize;
			stage float RoughnessFade;
			stage float MaxTraceSamples;
			
            stage float UseTemporal;
            stage float TemporalResponse;
            stage float TemporalScale;
            stage float Padding0;

            stage float Time;
            stage float BRDFBias;
            stage float2 Padding1;

			stage float ViewFarPlane;
			stage float RayStepScale;
			stage float2 ScreenSize;
			
			stage float4 ViewInfo;
			
			stage float4 CameraPosWS;

			stage float4x4 V;
			stage float4x4 VP;
			stage float4x4 IVP;
			stage float4x4 P;
        };
		
		// Sample raw device depth buffer
		float SampleZ(in float2 uv)
		{
			return Texture1.SampleLevel(PointSampler, uv, 0).r;
		}
		
		// Linearize raw device depth
		float LinearizeZ(in float depth)
		{
			return ViewInfo.w / (depth - ViewInfo.z);
		}
		
		// Sample linear depth
		float SampleDepth(in float2 uv)
		{
			float depth = SampleZ(uv);
			return LinearizeZ(depth);
		}
		
		// 1:-1 to 0:1
        float2 ClipToUv(float2 clipPos)
        {
			return clipPos * float2(0.5, -0.5) + float2(0.5, 0.5);
        }
		
        // 0:1 to 1:-1
        float2 UvToClip(float2 uv)
        {
			return uv * float2(2, -2) + float2(-1, 1);
        }
		
		float3 ComputeWorldPosition(float2 uv)
        {
			float rawDepth = SampleZ(uv);
			return ComputeWorldPosition(uv, rawDepth);
        }
		
		float3 ComputeWorldPosition(float2 uv, float rawDepth)
        {
			float4 clipPos = float4(UvToClip(uv), rawDepth, 1);
			float4 pos = mul(clipPos, IVP);
			return pos.xyz / pos.w;
        }
		
		float3 ComputeViewPosition(float2 uv, float rawDepth)
        {
			float eyeZ = LinearizeZ(rawDepth) * ViewFarPlane;
			return float3(UvToClip(uv) * ViewInfo.xy * eyeZ, eyeZ);
        }

        float3 SampleViewPosition(float2 uv)
        {
            float rawDepth = SampleZ(uv);
            return ComputeViewPosition(uv, rawDepth);
        }
        
        float3 ScreenToView(float2 uv, float depth)
        {
			return float3(UvToClip(uv) * ViewInfo.xy, depth);
        }

		// go into clip space (-1:1 from bottom/left to up/right)
        float3 ProjectWorldToClip(float3 wsPos)
        {
            float4 uv = mul(float4(wsPos, 1), VP);
            uv /= uv.w;
            return uv.xyz;
        }
		
        // go into UV space. (0:1 from top/left to bottom/right)
        float3 ProjectWorldToUv(float3 wsPos)
        {
            float3 pos = ProjectWorldToClip(wsPos);
            return float3(ClipToUv(pos.xy), pos.z);
        }
		
		float max2(float2 v)
		{
			return max(v.x, v.y);
		}
    };
}