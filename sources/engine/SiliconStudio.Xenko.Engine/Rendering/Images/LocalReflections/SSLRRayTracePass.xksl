// Copyright (c) 2017 Silicon Studio Corp. (http://siliconstudio.co.jp)
// This file is distributed under GPL v3. See LICENSE.md for details.

namespace SiliconStudio.Xenko.Rendering.Images
{
    /// <summary>
	/// Screen Space Local Reflections shader for Ray Trace Pass
    /// </summary>
    shader SSLRRayTracePass : ImageEffectShader, SSLRCommon, NormalPack, Math
    {
        // Parameter WorldAntiSelfOcclusionBias is packed in CameraPosWS.w
        #define WorldAntiSelfOcclusionBias CameraPosWS.w

        float4 TangentToWorld(float3 N, float4 H)
        {
	        float3 UpVector = abs(N.z) < 0.999 ? float3(0.0, 0.0, 1.0) : float3(1.0, 0.0, 0.0);
	        float3 T = normalize( cross( UpVector, N ) );
	        float3 B = cross( N, T );
				 
	        return float4((T * H.x) + (B * H.y) + (N * H.z), H.w);
        }

        // Brian Karis, Epic Games "Real Shading in Unreal Engine 4"
        float4 ImportanceSampleGGX(float2 Xi, float Roughness)
        {
	        float m = Roughness * Roughness;
	        float m2 = m * m;
		
	        float Phi = 2 * PI * Xi.x;
				 
	        float CosTheta = sqrt((1.0 - Xi.y) / (1.0 + (m2 - 1.0) * Xi.y));
	        float SinTheta = sqrt(max(1e-5, 1.0 - CosTheta * CosTheta));
				 
	        float3 H;
	        H.x = SinTheta * cos(Phi);
	        H.y = SinTheta * sin(Phi);
	        H.z = CosTheta;
		
	        float d = (CosTheta * m2 - CosTheta) * CosTheta + 1;
	        float D = m2 / (PI * d * d);
	        float pdf = D * CosTheta;

	        return float4(H, pdf); 
        }

        float RayAttenBorder(float2 pos, float value)
        {
	        float borderDist = min(1.0 - max(pos.x, pos.y), min(pos.x, pos.y));
	        return saturate(borderDist > value ? 1.0 : borderDist / value);
        }

        override stage float4 Shading()
        {
			// Inputs Mapping:
			// Texture0 - Scene Color
			// Texture1 - Depth
			// Texture2 - World Space Normals
			// Texture3 - Specular Color + Roughness
            
            streams.ColorTarget1 = 0;
			
			float2 uv = streams.TexCoord;
			
			// Sample material roughness
			float4 specularRoughnessBuffer = Texture3.SampleLevel(PointSampler, uv, 0);
			float roughness = specularRoughnessBuffer.a;
			
			// Get view space position
			float depth = SampleZ(uv);
			float3 positionVS = ComputeViewPosition(uv, depth);
			
            //return pow(depth.xxxx, 8) / 6;

			// Reject invalid pixels
			if(positionVS.z > 100.0f || roughness > RoughnessFade)
				return 0;
			
			// Calculate view space normal vector
			float4 normalsBuffer = Texture2.SampleLevel(PointSampler, uv, 0);
			float3 normalWS = DecodeNormal(normalsBuffer.rgb);
			float3 normalVS = mul(normalWS, (float3x3)V);
			
			// TODO: dont use reflectVS, only reflectWS ??

            // Randomize it a little
            float2 jitter = RandN2(uv, Time * UseTemporal);
		    float2 Xi = jitter;
		    Xi.y = lerp(Xi.y, 0.0, BRDFBias);

            float4 H = TangentToWorld(normalWS, ImportanceSampleGGX(Xi, roughness));

			// Calculate normalized view space reflection vector
			float3 reflectVS = normalize(reflect(positionVS, normalVS));

            if(positionVS.z < 1.0 && reflectVS.z < 0.4)
                return 0;

			float3 positionWS = ComputeWorldPosition(uv, depth);
			float3 viewWS = normalize(positionWS - CameraPosWS.xyz);
			//float3 reflectWS = reflect(viewWS, normalWS);
			float3 reflectWS = reflect(viewWS, H.xyz);

			// TODO: cleanup unsused constants
			
			// TODO: optimzie some stuff, less view space <-> world space oeprations, less math etc.
			
			float3 startWS = positionWS + normalWS * WorldAntiSelfOcclusionBias;
            float3 startUV = ProjectWorldToUv(startWS);
            float3 endUV = ProjectWorldToUv(startWS + reflectWS);
			
            float3 rayUV = endUV - startUV;
			float screenStep = 1.0f / ScreenSize.x;
			rayUV *= screenStep / max2(abs(rayUV.xy));
			float3 startUv = startUV + rayUV * 2;
			
			float3 currOffset = startUv;
			float3 rayStep = rayUV * 2;
			
			// Calculate number of samples
			float3 samplesToEdge = ((sign(rayStep.xyz) * 0.5 + 0.5) - currOffset.xyz) / rayStep.xyz;
			samplesToEdge.x = min(samplesToEdge.x, min(samplesToEdge.y, samplesToEdge.z)) * 1.05f;
			float numSamples = min(MaxTraceSamples, samplesToEdge.x);
			rayStep *= samplesToEdge.x / numSamples;

			// Calculate depth diffrence error
			float depthDiffError = 1.3f * abs(rayStep.z);

			// Ray trace
			float currSampleIndex = 0;
			float currSample, depthDiff;
			[loop]
			while (currSampleIndex < numSamples)
			{
				// Sample depth buffer and calculate depth diffrence
				currSample = SampleZ(currOffset.xy);
				depthDiff = currOffset.z - currSample;
				
				// Check intersection
				if(depthDiff >= 0)
				{
                    if (depthDiff < depthDiffError)
                    {
                        break;
                    }
                    else
                    {
                        currOffset -= rayStep;
                        rayStep *= 0.5;
                    }
				}

				// Move forward
				currOffset += rayStep;
                currSampleIndex++;
			}
			
			// Check if has valid result after ray traycing
			if(currSampleIndex >= numSamples)
			{
				// All samples done but no result
				return 0;
			}

			// Calculate intersection texture coordinate
			//float3 lastOffset = currOffset - rayStep;
			//float2 hitUV = lastOffset.xy + (currSample - lastOffset.z) * rayStep.xy;
			float2 hitUV = currOffset.xy;
			
            const float EdgeFactor = 0.1f; // TODO: promote to param for user

			// Debug scene color preview:
			//return Texture0.Sample(PointSampler, hitUV.xy);

			// Fade rays close to screen edge
			const float fadeStart = 0.9f;
			const float fadeEnd = 1.0f;
			const float fadeDiffRcp = 1.0f / (fadeEnd - fadeStart);
			float2 boundary = abs(hitUV - float2(0.5f, 0.5f)) * 2.0f;
			float fadeOnBorder = 1.0f - saturate((boundary.x - fadeStart) * fadeDiffRcp);
			fadeOnBorder *= 1.0f - saturate((boundary.y - fadeStart) * fadeDiffRcp);
			fadeOnBorder = smoothstep(0.0f, 1.0f, fadeOnBorder);
			fadeOnBorder *= RayAttenBorder(hitUV, EdgeFactor);

			// Fade rays on high roughness
			float roughnessFade = saturate((RoughnessFade - roughness) * 20);

			// Compute final pixel mask
            streams.ColorTarget1 = fadeOnBorder * roughnessFade;
            
            // Output: xy: hitUV, z: hitZ, w: PDF
			return float4(currOffset.xyz, H.w);
        }
    };
}