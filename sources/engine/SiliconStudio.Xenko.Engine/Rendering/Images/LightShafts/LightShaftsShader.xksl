// Copyright (c) 2014-2017 Silicon Studio Corp. (http://siliconstudio.co.jp)
// This file is distributed under GPL v3. See LICENSE.md for details.

namespace SiliconStudio.Xenko.Rendering.Images
{
    shader LightShaftsShader : ImageEffectShader, ShadowMapCommon<PerFrame>, PostEffectBoundingRay<16>, LightStream, NormalStream
    {
        stage compose DirectLightGroup lightGroup;

        cbuffer PerFrame
        {
            stage float ExtinctionFactor;
            stage float DensityFactor;
            stage float ExtinctionRatio;
        };

        override float ComputeColorIn(float4 positionWS, float stepSize, int stepIndex)
        {
            float3 lightResult = 0;
            float3 sigmaT = ComputeDensity(positionWS) * ExtinctionFactor;
            float3 sigmaS = sigmaT * ExtinctionRatio;
            float3 stepExtinction = exp(-sigmaT * stepSize);

            // Just because some shadow groups use some of these streams, clear them for now
            ResetLightStream();
            streams.NdotL = 1;
            streams.normalWS = float3(0,1,0);

            float atten = lightGroup.ComputeAttenuation(positionWS.xyz, 0);
            float3 shadowColor = lightGroup.ComputeShadow(positionWS.xyz, 0);
            float shadow = max(max(shadowColor.x, shadowColor.y), shadowColor.z);
            lightResult = stepExtinction * sigmaS * stepSize * shadow * atten;
            //lightResult = atten * 0.01 * shadow;
            //
            //if(shadow < 0.1f)
            //    lightResult = 1;
            //else
            //    lightResult = 0;
            return lightResult;
        }

        override float ComputeColorOut()
        {
            return 0;
        }

        float ComputeDensity(float positionVS)
        {
            return DensityFactor;
        }
    };
}