// Copyright (c) 2014-2017 Silicon Studio Corp. All rights reserved. (https://www.siliconstudio.co.jp)
// See LICENSE.md for full license information.

/// <remarks>
/// SampleCount: generic int - number of iterations.
/// </remarks>
shader PostEffectBoundingRay<int SampleCount> : ImageEffectShader, DepthBase, Transformation, PositionStream4
{
    float ComputeColorOut() 
    {
        return 0;
    }

    float ComputeColorIn(float4 positionWS, float stepSize, int stepIndex) 
    {
        return 0;
    }

    int HashXYZ(float3 input)
    {
        return int(input.z * 313 + input.x * 1039 + input.y * 638359);
    }

    float RayStepJitter(float3 input, float stepSize) 
    {
        return stepSize * Math.FastRandom(HashXYZ(input));
    }

    float ComputeFinalColor(float lightAcc) 
    {
        return float4(lightAcc.xxx, 1.0);
    }

    stage override void PSMain()
    {
        // minmax.x = min
        // minmax.y = max
        float2 minmax = Texture0.Sample(PointSampler, streams.TexCoord).xy;

        float backsideMin = Texture1.Sample(PointSampler, 0.5).x;
        if(backsideMin < 1.0f)
            minmax.x = 0;

        // Need at least a maximum value for this pixel to be contained in the bounding box
        if(minmax.y < 1)
        {
            float currentZ = GetZProjDepthFromUV(streams.TexCoord);
            float minZ = minmax.x;
            float maxZ = min(minmax.y, currentZ);

            float minDistance = ComputeDepthFromZProj(minZ);
            float maxDistance = ComputeDepthFromZProj(maxZ);

            // Compute world space direction and position of the ending position
            float4 positionClipSpace = float4((1.0 - streams.TexCoord.xy * 2.0) * float2(-1.0f, 1.0f), maxZ, 1.0f);
            float4 positionVS = mul(positionClipSpace, ProjectionInverse);
            positionVS.xyzw /= positionVS.w;
            float4 endingPosition = mul(positionVS, ViewInverse);
            float4 directionWS = float4(endingPosition.xyz - Eye.xyz, 0);
            directionWS = normalize(directionWS);
            
            // Compute depth slope and apply it to the world space direction so it can be multiplied by depth distances
            float depthSlope = length(endingPosition.xyz - Eye.xyz) / maxDistance;
            directionWS *= depthSlope;

            float stepRange = (maxDistance - minDistance); 
            float stepSize = stepRange / (float)SampleCount;

            float3 lightResult = 0.0f;

            // Expected by the directional shadow map to compute the cascades
            streams.DepthVS = minDistance;
            if(maxDistance > minDistance)
            {
                // Recalculate max distance by jittering the length of the ray to avoid banding artifacts
                stepSize = (maxDistance - minDistance) / (float)SampleCount;

                // Starting position
                float4 positionWS = endingPosition + (RayStepJitter(positionVS.xyz, stepSize)-stepRange) * directionWS;
                streams.DepthVS = minDistance;

                for(int i = 0; i < SampleCount; i++) 
                {
                    lightResult += this.ComputeColorIn(positionWS, stepSize, i);
                    positionWS.xyz += stepSize * directionWS;
                    streams.DepthVS += stepSize;
                }
            }

            streams.ColorTarget = ComputeFinalColor(lightResult);
        }
        else // Outside the bounding box
        {
            streams.ColorTarget = this.ComputeColorOut();
        }
    }
};
