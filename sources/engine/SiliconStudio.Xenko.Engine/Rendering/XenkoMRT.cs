// <auto-generated>
// Do not edit this file yourself!
//
// This code was generated by Xenko Shader Mixin Code Generator.
// To generate it yourself, please install SiliconStudio.Xenko.VisualStudio.Package .vsix
// and re-save the associated .xkfx.
// </auto-generated>

using System;
using SiliconStudio.Core;
using SiliconStudio.Xenko.Rendering;
using SiliconStudio.Xenko.Graphics;
using SiliconStudio.Xenko.Shaders;
using SiliconStudio.Core.Mathematics;
using Buffer = SiliconStudio.Xenko.Graphics.Buffer;

using SiliconStudio.Xenko.Rendering.Data;
using SiliconStudio.Xenko.Rendering.Materials;
namespace SiliconStudio.Xenko.Rendering
{
    internal static partial class ShaderMixins
    {
        internal partial class XenkoMRT  : IShaderMixinBuilder
        {
            public void Generate(ShaderMixinSource mixin, ShaderMixinContext context)
            {
                ShaderSourceCollection targetExtensions = context.GetParam(XenkoMRTKeys.RenderTargetExtensions);
                if (targetExtensions != null)
                {
                    mixin.AddMacro("RENDER_TARGET_COUNT", targetExtensions.Count + 1);
                    int slot = 1;
                    foreach(ShaderSource renderTargetExtension in targetExtensions)

                    {
                        if (renderTargetExtension != null)
                        {
                            switch (slot)

                            {
                                case 1:

                                    {
                                        var __mixinToCompose__ = (renderTargetExtension);
                                        var __subMixin = new ShaderMixinSource();
                                        context.PushComposition(mixin, "ShadingColor1", __subMixin);
                                        context.Mixin(__subMixin, __mixinToCompose__);
                                        context.PopComposition();
                                    }
                                    break;
                                case 2:

                                    {
                                        var __mixinToCompose__ = (renderTargetExtension);
                                        var __subMixin = new ShaderMixinSource();
                                        context.PushComposition(mixin, "ShadingColor2", __subMixin);
                                        context.Mixin(__subMixin, __mixinToCompose__);
                                        context.PopComposition();
                                    }
                                    break;
                                case 3:

                                    {
                                        var __mixinToCompose__ = (renderTargetExtension);
                                        var __subMixin = new ShaderMixinSource();
                                        context.PushComposition(mixin, "ShadingColor3", __subMixin);
                                        context.Mixin(__subMixin, __mixinToCompose__);
                                        context.PopComposition();
                                    }
                                    break;
                                case 4:

                                    {
                                        var __mixinToCompose__ = (renderTargetExtension);
                                        var __subMixin = new ShaderMixinSource();
                                        context.PushComposition(mixin, "ShadingColor4", __subMixin);
                                        context.Mixin(__subMixin, __mixinToCompose__);
                                        context.PopComposition();
                                    }
                                    break;
                                case 5:

                                    {
                                        var __mixinToCompose__ = (renderTargetExtension);
                                        var __subMixin = new ShaderMixinSource();
                                        context.PushComposition(mixin, "ShadingColor5", __subMixin);
                                        context.Mixin(__subMixin, __mixinToCompose__);
                                        context.PopComposition();
                                    }
                                    break;
                                case 6:

                                    {
                                        var __mixinToCompose__ = (renderTargetExtension);
                                        var __subMixin = new ShaderMixinSource();
                                        context.PushComposition(mixin, "ShadingColor6", __subMixin);
                                        context.Mixin(__subMixin, __mixinToCompose__);
                                        context.PopComposition();
                                    }
                                    break;
                                case 7:

                                    {
                                        var __mixinToCompose__ = (renderTargetExtension);
                                        var __subMixin = new ShaderMixinSource();
                                        context.PushComposition(mixin, "ShadingColor7", __subMixin);
                                        context.Mixin(__subMixin, __mixinToCompose__);
                                        context.PopComposition();
                                    }
                                    break;
                                case 8:

                                    {
                                        var __mixinToCompose__ = (renderTargetExtension);
                                        var __subMixin = new ShaderMixinSource();
                                        context.PushComposition(mixin, "ShadingColor8", __subMixin);
                                        context.Mixin(__subMixin, __mixinToCompose__);
                                        context.PopComposition();
                                    }
                                    break;
                            }
                        }
                        ++slot;
                    }
                }
            }

            [ModuleInitializer]
            internal static void __Initialize__()

            {
                ShaderMixinManager.Register("XenkoMRT", new XenkoMRT());
            }
        }
    }
}
