// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 14.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace SiliconStudio.PackageManager
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using NuGet;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Dev\Stash\Xenko\sources\assets\SiliconStudio.PackageManager\TargetGenerator.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public partial class TargetGenerator : TargetGeneratorBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<Project ToolsVersion=\"12.0\" xmlns=\"http:" +
                    "//schemas.microsoft.com/developer/msbuild/2003\" InitialTargets=\"CheckPackages\">\r" +
                    "\n");
            
            #line 9 "C:\Dev\Stash\Xenko\sources\assets\SiliconStudio.PackageManager\TargetGenerator.tt"
  foreach (var package in packages)
	{
        if (package.Tags != null && package.Tags.Contains("internal"))
        {
            continue; // We don't want to polute the Common.targets file with internal packages
        }

        var packageVar = NugetStore.GetPackageVersionVariable(package.Id);
		var packageTarget = String.Format(@"$(MSBuildThisFileDirectory)..\{0}\{1}.{2}\Targets\{1}.targets", store.RepositoryPath, package.Id, "$(" + packageVar + ")");
		
		// Special case: if major version 1.0 still exists, use it as default (new projects should be created with props file)
		var defaultPackageVersion = store.FindLocalPackagesById(package.Id).Select(x => x.Version.SemanticVersion).FirstOrDefault(x => x.Version.Major == 1 && x.Version.Minor == 0) ?? package.Version;
	
            
            #line default
            #line hidden
            this.Write("  <PropertyGroup>\r\n    <");
            
            #line 23 "C:\Dev\Stash\Xenko\sources\assets\SiliconStudio.PackageManager\TargetGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(packageVar));
            
            #line default
            #line hidden
            this.Write(" Condition=\"\'$(");
            
            #line 23 "C:\Dev\Stash\Xenko\sources\assets\SiliconStudio.PackageManager\TargetGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(packageVar));
            
            #line default
            #line hidden
            this.Write("Override)\' != \'\'\">$(");
            
            #line 23 "C:\Dev\Stash\Xenko\sources\assets\SiliconStudio.PackageManager\TargetGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(packageVar));
            
            #line default
            #line hidden
            this.Write("Override)</");
            
            #line 23 "C:\Dev\Stash\Xenko\sources\assets\SiliconStudio.PackageManager\TargetGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(packageVar));
            
            #line default
            #line hidden
            this.Write(">\r\n    <");
            
            #line 24 "C:\Dev\Stash\Xenko\sources\assets\SiliconStudio.PackageManager\TargetGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(packageVar));
            
            #line default
            #line hidden
            this.Write("Saved>$(");
            
            #line 24 "C:\Dev\Stash\Xenko\sources\assets\SiliconStudio.PackageManager\TargetGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(packageVar));
            
            #line default
            #line hidden
            this.Write(")</");
            
            #line 24 "C:\Dev\Stash\Xenko\sources\assets\SiliconStudio.PackageManager\TargetGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(packageVar));
            
            #line default
            #line hidden
            this.Write("Saved>\r\n");
            
            #line 25 "C:\Dev\Stash\Xenko\sources\assets\SiliconStudio.PackageManager\TargetGenerator.tt"
      // List all the correspondances: Major.minor -> latest installed explicit version

        // Get all the related versions of the same package also installed, and order by Major.Minor
        var allMajorVersions = store.FindLocalPackagesById(package.Id).GroupBy(p => p.Version.Version.Major, p => p);
        foreach (var major in allMajorVersions)
        {
            var majorVersion = major.Key;
            var minorPkg = major.GroupBy(p => p.Version.Version.Minor, p => p);
            foreach (var minor in minorPkg)
            {
                var latestPackage = minor.First(); 
            
            #line default
            #line hidden
            this.Write("    <");
            
            #line 36 "C:\Dev\Stash\Xenko\sources\assets\SiliconStudio.PackageManager\TargetGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(packageVar));
            
            #line default
            #line hidden
            this.Write("Revision Condition=\"\'$(");
            
            #line 36 "C:\Dev\Stash\Xenko\sources\assets\SiliconStudio.PackageManager\TargetGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(packageVar));
            
            #line default
            #line hidden
            this.Write(")\' == \'");
            
            #line 36 "C:\Dev\Stash\Xenko\sources\assets\SiliconStudio.PackageManager\TargetGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(majorVersion));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 36 "C:\Dev\Stash\Xenko\sources\assets\SiliconStudio.PackageManager\TargetGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(minor.Key));
            
            #line default
            #line hidden
            this.Write("\'\">");
            
            #line 36 "C:\Dev\Stash\Xenko\sources\assets\SiliconStudio.PackageManager\TargetGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(latestPackage.Version.ToString()));
            
            #line default
            #line hidden
            this.Write("</");
            
            #line 36 "C:\Dev\Stash\Xenko\sources\assets\SiliconStudio.PackageManager\TargetGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(packageVar));
            
            #line default
            #line hidden
            this.Write("Revision>\r\n");
            
            #line 37 "C:\Dev\Stash\Xenko\sources\assets\SiliconStudio.PackageManager\TargetGenerator.tt"
          }
        }
            
            #line default
            #line hidden
            this.Write("    <");
            
            #line 39 "C:\Dev\Stash\Xenko\sources\assets\SiliconStudio.PackageManager\TargetGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(packageVar));
            
            #line default
            #line hidden
            this.Write(">$(");
            
            #line 39 "C:\Dev\Stash\Xenko\sources\assets\SiliconStudio.PackageManager\TargetGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(packageVar));
            
            #line default
            #line hidden
            this.Write("Revision)</");
            
            #line 39 "C:\Dev\Stash\Xenko\sources\assets\SiliconStudio.PackageManager\TargetGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(packageVar));
            
            #line default
            #line hidden
            this.Write(">\r\n    <");
            
            #line 40 "C:\Dev\Stash\Xenko\sources\assets\SiliconStudio.PackageManager\TargetGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(packageVar));
            
            #line default
            #line hidden
            this.Write("Invalid Condition=\"\'$(");
            
            #line 40 "C:\Dev\Stash\Xenko\sources\assets\SiliconStudio.PackageManager\TargetGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(packageVar));
            
            #line default
            #line hidden
            this.Write(")\' == \'\' or !Exists(\'");
            
            #line 40 "C:\Dev\Stash\Xenko\sources\assets\SiliconStudio.PackageManager\TargetGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(packageTarget));
            
            #line default
            #line hidden
            this.Write("\')\">true</");
            
            #line 40 "C:\Dev\Stash\Xenko\sources\assets\SiliconStudio.PackageManager\TargetGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(packageVar));
            
            #line default
            #line hidden
            this.Write("Invalid>\r\n    <");
            
            #line 41 "C:\Dev\Stash\Xenko\sources\assets\SiliconStudio.PackageManager\TargetGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(packageVar));
            
            #line default
            #line hidden
            this.Write(" Condition=\"\'$(");
            
            #line 41 "C:\Dev\Stash\Xenko\sources\assets\SiliconStudio.PackageManager\TargetGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(packageVar));
            
            #line default
            #line hidden
            this.Write("Invalid)\' == \'true\'\">");
            
            #line 41 "C:\Dev\Stash\Xenko\sources\assets\SiliconStudio.PackageManager\TargetGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(defaultPackageVersion));
            
            #line default
            #line hidden
            this.Write("</");
            
            #line 41 "C:\Dev\Stash\Xenko\sources\assets\SiliconStudio.PackageManager\TargetGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(packageVar));
            
            #line default
            #line hidden
            this.Write(">\r\n  </PropertyGroup>\r\n");
            
            #line 43 "C:\Dev\Stash\Xenko\sources\assets\SiliconStudio.PackageManager\TargetGenerator.tt"
  } 
            
            #line default
            #line hidden
            this.Write("  <Target Name=\"CheckPackages\">\r\n");
            
            #line 45 "C:\Dev\Stash\Xenko\sources\assets\SiliconStudio.PackageManager\TargetGenerator.tt"
  foreach (var package in packages)
	{
		var packageVar = NugetStore.GetPackageVersionVariable(package.Id);
            
            #line default
            #line hidden
            this.Write("    <Message Condition=\"\'$(");
            
            #line 48 "C:\Dev\Stash\Xenko\sources\assets\SiliconStudio.PackageManager\TargetGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(packageVar));
            
            #line default
            #line hidden
            this.Write("Invalid)\' == \'true\'\" Text=\"Package ");
            
            #line 48 "C:\Dev\Stash\Xenko\sources\assets\SiliconStudio.PackageManager\TargetGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(package.Id));
            
            #line default
            #line hidden
            this.Write(" with version [$(");
            
            #line 48 "C:\Dev\Stash\Xenko\sources\assets\SiliconStudio.PackageManager\TargetGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(packageVar));
            
            #line default
            #line hidden
            this.Write("Saved)] not found. Use version $(");
            
            #line 48 "C:\Dev\Stash\Xenko\sources\assets\SiliconStudio.PackageManager\TargetGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(packageVar));
            
            #line default
            #line hidden
            this.Write(") instead\" />\r\n");
            
            #line 49 "C:\Dev\Stash\Xenko\sources\assets\SiliconStudio.PackageManager\TargetGenerator.tt"
  } 
            
            #line default
            #line hidden
            this.Write("  </Target>\r\n");
            
            #line 51 "C:\Dev\Stash\Xenko\sources\assets\SiliconStudio.PackageManager\TargetGenerator.tt"
  foreach (var package in packages)
	{
        var packageVar = NugetStore.GetPackageVersionVariable(package.Id);
        var packageTarget = String.Format(@"$(MSBuildThisFileDirectory)..\{0}\{1}.{2}\Targets\{1}.targets", store.RepositoryPath, package.Id, "$(" + packageVar + ")"); 
            
            #line default
            #line hidden
            this.Write("  <Import Project=\"");
            
            #line 55 "C:\Dev\Stash\Xenko\sources\assets\SiliconStudio.PackageManager\TargetGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(packageTarget));
            
            #line default
            #line hidden
            this.Write("\" Condition=\"Exists(\'");
            
            #line 55 "C:\Dev\Stash\Xenko\sources\assets\SiliconStudio.PackageManager\TargetGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(packageTarget));
            
            #line default
            #line hidden
            this.Write("\')\" />\r\n");
            
            #line 56 "C:\Dev\Stash\Xenko\sources\assets\SiliconStudio.PackageManager\TargetGenerator.tt"
  } 
            
            #line default
            #line hidden
            this.Write("</Project>");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public class TargetGeneratorBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
