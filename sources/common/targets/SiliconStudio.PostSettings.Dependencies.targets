<!-- Build file post-included by all Silicon Studio projects -->
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!-- 
  *****************************************************************************************************************************
  Dependencies reading (from .ssdeps)
  *****************************************************************************************************************************
  -->

  <!-- List dependency files from .ssdeps -->
  <Target Name="_SiliconStudioListDepsFiles" DependsOnTargets="ResolveAssemblyReferences">
    <ItemGroup>
      <_SiliconStudioDepsFile Include="@(ReferencePath->'%(RootDir)%(Directory)%(Filename).ssdeps')" Condition="'%(CopyLocal)' != 'false' And Exists('%(RootDir)%(Directory)%(Filename).ssdeps')"/>
      <_SiliconStudioDepsFile Include="@(ReferenceDependencyPaths->'%(RootDir)%(Directory)%(Filename).ssdeps')" Condition="'%(CopyLocal)' != 'false' And Exists('%(RootDir)%(Directory)%(Filename).ssdeps')"/>
    </ItemGroup>
  </Target>

  <!-- Note: this target Outputs are not real, used so that it gets expanded for each file
             also, if _SiliconStudioDepsFile is empty the target is still called so check for it -->
  <Target Name="_SiliconStudioBuildDependencies" DependsOnTargets="_SiliconStudioListDepsFiles" Outputs="%(_SiliconStudioDepsFile.Identity)">
    <!-- Read dependencies from file -->
    <ReadLinesFromFile File="%(_SiliconStudioDepsFile.Identity)" Condition="'%(_SiliconStudioDepsFile.Identity)' != ''">
      <Output TaskParameter="Lines" ItemName="_SiliconStudioDependencyLocal"/>
    </ReadLinesFromFile>
    <PropertyGroup>
      <_SiliconStudioSourceDir>%(_SiliconStudioDepsFile.RootDir)%(_SiliconStudioDepsFile.Directory)</_SiliconStudioSourceDir>
    </PropertyGroup>
    <ItemGroup>
      <_SiliconStudioDependencyLocal>
        <!-- Note: Using regex match rather than regex split or string split to avoid MSBuild MissingMethodException -->
        <Type>$([System.Text.RegularExpressions.Regex]::Match('%(Identity)', `(.*);(.*);(.*)`).get_Groups().get_Item(1).ToString())</Type>
        <SourcePath>$([System.Text.RegularExpressions.Regex]::Match('%(Identity)', `(.*);(.*);(.*)`).get_Groups().get_Item(2).ToString())</SourcePath>
        <Link>$([System.Text.RegularExpressions.Regex]::Match('%(Identity)', `(.*);(.*);(.*)`).get_Groups().get_Item(3).ToString())</Link>
        <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      </_SiliconStudioDependencyLocal>
      <_SiliconStudioDependencyContent Include="@(_SiliconStudioDependencyLocal->'$(_SiliconStudioSourceDir)%(SourcePath)')" Condition="'%(_SiliconStudioDependencyLocal.Type)' == 'Content'"/>
      <_SiliconStudioDependencyNativeLib Include="@(_SiliconStudioDependencyLocal->'$(_SiliconStudioSourceDir)%(SourcePath)')" Condition="'%(_SiliconStudioDependencyLocal.Type)' == 'NativeLib'"/>
    </ItemGroup>

    <!-- Message -->
    <Message Importance="Normal" Text="Detected dependency from %(_SiliconStudioDepsFile.FileName)" Condition="'%(_SiliconStudioDepsFile.Identity)' != ''"/>
    <Message Importance="Normal" Text="  %(_SiliconStudioDependencyLocal.Type): %(_SiliconStudioDependencyLocal.Identity) => %(_SiliconStudioDependencyLocal.Link)"/>

    <!-- Cleanup so that _SiliconStudioDependencyLocal is local -->
    <ItemGroup>
      <_SiliconStudioDependencyLocal Remove="@(_SiliconStudioDependencyLocal)"/>
    </ItemGroup>
  </Target>
  
  <Target Name="_SiliconStudioCopyContent" DependsOnTargets="_SiliconStudioBuildDependencies" AfterTargets="ResolveAssemblyReferences" Condition="'$(SiliconStudioDependenciesCopy)' != 'false'">
    <ItemGroup>
      <Content Include="@(_SiliconStudioDependencyContent)"/>
    </ItemGroup>
  </Target>

  <!-- 
  *****************************************************************************************************************************
  Native libraries setup (from .ssdeps)
  *****************************************************************************************************************************
  -->
  <Target Name="_SiliconStudioSetupNativeLibraries" DependsOnTargets="_SiliconStudioBuildDependencies" AfterTargets="ResolveAssemblyReferences" Condition="'$(SiliconStudioDependenciesCopy)' != 'false'">
    <!-- Windows, UWP, Linux & macOS -->
    <ItemGroup Condition=" '$(SiliconStudioPlatform)' == '' Or '$(SiliconStudioPlatform)' == 'Windows' Or '$(SiliconStudioPlatform)' == 'Linux' Or '$(SiliconStudioPlatform)' == 'macOS' ">
      <None Include="@(_SiliconStudioDependencyNativeLib)">
        <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      </None>
    </ItemGroup>

    <!-- TODO: Implement this for UWP unit tests (need to know current CPU? or maybe there is a CPU-agnostic way?)
         Note: already implemented in Xenko.targets for Game (one solution platform per CPU) -->
    <Error Condition="'$(SiliconStudioPlatform)' == 'UWP'" Message="Native Library copy for UWP inside dev solution is not supported yet"/>

    <!-- Android -->
    <ItemGroup Condition=" '$(SiliconStudioPlatform)' == 'Android' ">
      <AndroidNativeLibrary Include="@(_SiliconStudioDependencyNativeLib)"/>
    </ItemGroup>

    <!--iOS -->
    <ItemGroup Condition=" '$(SiliconStudioPlatform)' == 'iOS' ">
      <!-- strip any "lib" prefix and populate the LibraryName value -->
      <_SiliconStudioDependencyNativeLib>
        <LibraryName>$([System.Text.RegularExpressions.Regex]::Match('%(Filename)', `(lib)*(.+)`).get_Groups().get_Item(2).ToString())</LibraryName>
      </_SiliconStudioDependencyNativeLib>

      <None Include="@(_SiliconStudioDependencyNativeLib)">
        <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      </None>
    </ItemGroup>
  
    <PropertyGroup Condition=" '$(SiliconStudioPlatform)' == 'iOS' ">
      <MtouchExtraArgsLibs>$(XenkoMTouchExtras) -L"%24{ProjectDir}" @(_SiliconStudioDependencyNativeLib->'-l%(LibraryName) "%24{ProjectDir}/%(Filename)%(Extension)"',' ')</MtouchExtraArgsLibs>
      <MtouchExtraArgs>$(MtouchExtraArgs) --compiler=clang -cxx -gcc_flags '-lstdc++ $(MtouchExtraArgsLibs)'</MtouchExtraArgs>
    </PropertyGroup>
  </Target>

  <!-- 
  *****************************************************************************************************************************
  Dependencies generation (to .ssdeps)
  *****************************************************************************************************************************
  -->
  <Target Name="_SiliconStudioWriteNativeDependencies" AfterTargets="Build">
    <!-- Set TargetPath on SiliconStudioContent and SiliconStudioNativeLib -->
    <AssignTargetPath RootFolder="$(MSBuildProjectDirectory)" Files="@(SiliconStudioContent)">
      <Output TaskParameter="AssignedFiles" ItemName="_SiliconStudioContentAssigned"/>
    </AssignTargetPath>
    <AssignTargetPath RootFolder="$(MSBuildProjectDirectory)" Files="@(SiliconStudioNativeLib)">
      <Output TaskParameter="AssignedFiles" ItemName="_SiliconStudioNativeLibAssigned"/>
    </AssignTargetPath>

    <!-- Combine into _SiliconStudioDependencyToCopy (and add RelativePath and Type) -->
    <ItemGroup>
      <_SiliconStudioDependencyToCopy Include="@(_SiliconStudioContentAssigned)">
        <RelativePath Condition="'%(_SiliconStudioContentAssigned.RelativePath)' == ''">%(TargetPath)</RelativePath>
        <Type>Content</Type>
        <Destination>$(OutDir)%(TargetPath)</Destination>
      </_SiliconStudioDependencyToCopy>

      <_SiliconStudioDependencyToCopy Include="@(_SiliconStudioNativeLibAssigned)">
        <RelativePath Condition="'%(_SiliconStudioNativeLibAssigned.RelativePath)' == ''">%(TargetPath)</RelativePath>
        <Type>NativeLib</Type>
        <Destination>$(OutDir)%(TargetPath)</Destination>
      </_SiliconStudioDependencyToCopy>
	  
	  <_SiliconStudioDependencyToCopy Remove="@(_SiliconStudioNativeLibAssigned)" Condition=" '$(SiliconStudioPackageBuild)' == 'true' And '%(_SiliconStudioNativeLibAssigned.Extension)' == '.pdb' "/>
    </ItemGroup>

    <!-- Copy files -->
    <Copy
      SourceFiles = "@(_SiliconStudioDependencyToCopy)"
      DestinationFiles = "@(_SiliconStudioDependencyToCopy->'%(Destination)')"
      OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)"
      Retries="$(CopyRetryCount)"
      RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)"
      UseHardlinksIfPossible="$(CreateHardLinksForAdditionalFilesIfPossible)">
      <Output TaskParameter="DestinationFiles" ItemName="FileWrites"/>
    </Copy>

    <!-- Write file containing list of dependent files (or delete it if nothing) -->
    <WriteLinesToFile Condition="'@(_SiliconStudioDependencyToCopy)' != ''" File="$(OutputPath)$(TargetName).ssdeps" Lines="@(_SiliconStudioDependencyToCopy->'%(Type);%(TargetPath);%(RelativePath)')" Overwrite="true"/>
    <Delete Condition="'@(_SiliconStudioDependencyToCopy)' == ''" Files="$(OutputPath)$(TargetName).ssdeps"/>
  </Target>
</Project>
